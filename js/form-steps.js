import { config, validateConfig } from './config.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
async function sendToTelegram(data) {
    try {
        validateConfig();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        throw new Error('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }

    const { TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID } = config;
    console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', data);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `
üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –∫–≤–∏–∑–∞!

üè¢ –¢–∏–ø –±–∏–∑–Ω–µ—Å–∞: ${data.business_type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üéØ –°—Ñ–µ—Ä–∞: ${data.business_sphere || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìç –õ–æ–∫–∞—Ü–∏–∏: ${data.locations || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${data.average_check || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üë§ –ò–º—è: ${data.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}
    `.trim();

    console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);

    const requestData = {
        chat_id: TELEGRAM_CHAT_ID,
        text: message
    };

    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', {
        url: `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
        data: requestData
    });

    try {
        const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData)
        });

        console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
            status: response.status,
            statusText: response.statusText
        });

        const result = await response.json();
        console.log('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', result);

        if (!response.ok) {
            throw new Error(result.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram');
        }

        return true;
    } catch (error) {
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            name: error.name,
            message: error.message,
            stack: error.stack
        });
        throw new Error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

class StepForm {
    constructor() {
        this.currentStep = 1;
        this.totalSteps = 5;
        this.formData = {};

        this.initStartButton();
    }

    initStartButton() {
        const startButton = document.querySelector('.start-quiz-button');
        const quizStart = document.querySelector('.quiz-start');
        const quizForm = document.querySelector('.quiz');

        if (startButton && quizStart && quizForm) {
            startButton.addEventListener('click', () => {
                quizStart.style.display = 'none';
                quizForm.style.display = 'block';
                this.init();

                // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
                setTimeout(() => {
                    quizForm.style.opacity = '1';
                }, 50);
            });
        }
    }

    init() {
        this.slides = document.querySelectorAll('.quiz-slide');
        this.progressBar = document.querySelector('.progress-bar');
        this.currentStepElement = document.querySelector('.current-step');

        this.initStepIndicators();
        this.initOptionCards();
        this.initNavigationButtons();
        this.initFormInputs();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–∞–π–¥
        this.showSlide(1);
        this.updateProgress();
    }

    initStepIndicators() {
        this.currentStepElement.textContent = this.currentStep;
        document.querySelector('.total-steps').textContent = this.totalSteps;
    }

    initOptionCards() {
        const radioButtons = document.querySelectorAll('input[type="radio"]');
        radioButtons.forEach(radio => {
            radio.addEventListener('change', () => {
                this.formData[radio.name] = radio.value;
                this.updateNextButton();
            });
        });
    }

    initNavigationButtons() {
        const nextButtons = document.querySelectorAll('.next');
        const backButtons = document.querySelectorAll('.back');

        nextButtons.forEach(button => {
            button.addEventListener('click', () => this.goToNextStep());
        });

        backButtons.forEach(button => {
            button.addEventListener('click', () => this.goToPreviousStep());
        });
    }

    initFormInputs() {
        const form = document.querySelector('.quiz-form');
        if (form) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                await this.submitForm(e);
            });

            const requiredInputs = form.querySelectorAll('input[required]');
            requiredInputs.forEach(input => {
                input.addEventListener('input', () => {
                    this.formData[input.name] = input.value;
                    this.updateSubmitButton();
                });
            });
        }
    }

    showSlide(step) {
        this.slides.forEach(slide => {
            slide.style.display = 'none';
            slide.classList.remove('active');
        });

        const currentSlide = document.querySelector(`[data-step="${step}"]`);
        if (currentSlide) {
            currentSlide.style.display = 'block';
            setTimeout(() => {
                currentSlide.classList.add('active');
            }, 50);
        }
    }

    updateProgress() {
        const progress = (this.currentStep / this.totalSteps) * 100;
        this.progressBar.style.width = `${progress}%`;
        this.currentStepElement.textContent = this.currentStep;
    }

    updateNextButton() {
        const currentSlide = document.querySelector(`[data-step="${this.currentStep}"]`);
        const nextButton = currentSlide.querySelector('.next');
        const radioButtons = currentSlide.querySelectorAll('input[type="radio"]');
        const isAnyChecked = Array.from(radioButtons).some(radio => radio.checked);

        if (nextButton) {
            nextButton.disabled = !isAnyChecked;
        }
    }

    updateSubmitButton() {
        const form = document.querySelector('.quiz-form');
        const submitButton = form.querySelector('button[type="submit"]');
        const requiredInputs = form.querySelectorAll('input[required]');
        const isAllFilled = Array.from(requiredInputs).every(input => input.value.trim() !== '');
        const agreement = form.querySelector('input[name="agreement"]');

        if (submitButton) {
            submitButton.disabled = !isAllFilled || !agreement.checked;
        }
    }

    goToNextStep() {
        if (this.currentStep < this.totalSteps) {
            this.currentStep++;
            this.showSlide(this.currentStep);
            this.updateProgress();
        }
    }

    goToPreviousStep() {
        if (this.currentStep > 1) {
            this.currentStep--;
            this.showSlide(this.currentStep);
            this.updateProgress();
        }
    }

    async submitForm(e) {
        const form = e.target;
        const submitButton = form.querySelector('button[type="submit"]');
        const formWrapper = document.querySelector('.quiz');

        try {
            submitButton.disabled = true;
            submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = new FormData(form);
            console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ FormData:', Object.fromEntries(formData));
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ this.formData:', this.formData);

            const finalData = {
                ...this.formData,
                name: formData.get('name'),
                phone: formData.get('phone')
            };

            console.log('–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', finalData);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
            await sendToTelegram(finalData);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            formWrapper.innerHTML = `
                <div class="success-message" style="text-align: center; padding: 40px;">
                    <h3 style="color: #4CAF50; margin-bottom: 20px;">–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!</h3>
                    <p style="margin-bottom: 20px;">–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
                    <button onclick="location.reload()" class="blue-button" style="padding: 10px 20px;">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É</button>
                </div>
            `;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', error);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            const errorMessage = document.createElement('div');
            errorMessage.className = 'error-message';
            errorMessage.style.color = '#f44336';
            errorMessage.style.padding = '10px';
            errorMessage.style.marginTop = '10px';
            errorMessage.style.borderRadius = '4px';
            errorMessage.style.backgroundColor = '#ffebee';
            errorMessage.textContent = error.message;

            // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            submitButton.parentNode.insertBefore(errorMessage, submitButton.nextSibling);

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                errorMessage.remove();
            }, 5000);

        } finally {
            submitButton.disabled = false;
            submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
        }
    }

    resetForm() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this.formData = {};

        // –û—á–∏—â–∞–µ–º –≤—Å–µ radio buttons
        const radioButtons = document.querySelectorAll('input[type="radio"]');
        radioButtons.forEach(radio => {
            radio.checked = false;
        });

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        const form = document.querySelector('.quiz-form');
        if (form) {
            form.reset();
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É
        this.currentStep = 1;
        this.showSlide(1);
        this.updateProgress();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new StepForm();
});
